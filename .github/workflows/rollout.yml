# This is a basic workflow to help you get started with Actions
name: Phased rollout to stores

# Controls when the workflow will run
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      release:
        description: "Octopus Release Number"
        required: true

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  deploy-to-alpha:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    name: "üêô Deploy release ${{ github.event.inputs.release }} to Alpha stores"
    outputs:
      server_tasks: ${{ steps.deploy-release-to-alpha.outputs.server_tasks }}

    env:
      OCTOPUS_URL: ${{ vars.OCTOPUS_SERVER_URL }}
      OCTOPUS_API_KEY: ${{ secrets.OCTOPUS_API_KEY }}
      OCTOPUS_SPACE: ${{ vars.OCTOPUS_SPACE_NAME }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: OctopusDeploy/deploy-release-tenanted-action@v3
        id: "deploy-release-to-alpha"
        name: "üêô Deploy release ${{ github.event.inputs.release }} to Alpha stores"
        with:
          project: "Point of Sale Server"
          release_number: ${{ github.event.inputs.release }}
          environment: "Production"
          tenant_tags: "Release Ring/Alpha"
      - id: "print-tasks"
        run: echo "${{ steps.deploy-release-to-alpha.outputs.server_tasks }}"

  wait-for-alpha:
    needs: [ deploy-to-alpha ]
    runs-on: ubuntu-latest
    name: "üêô Wait for deployment of ${{ github.event.inputs.release }} to Alpha Stores to complete"
    strategy:
      matrix:
        value: ${{ fromJson(needs.deploy-to-alpha.outputs.server_tasks) }}
  
    env:
      OCTOPUS_URL: ${{ vars.OCTOPUS_SERVER_URL }}
      OCTOPUS_API_KEY: ${{ secrets.OCTOPUS_API_KEY }}
      OCTOPUS_SPACE: ${{ vars.OCTOPUS_SPACE_NAME }}
  
    steps:
      - uses: OctopusDeploy/await-task-action@v3
        id: "wait-for-deploy-alpha"
        name: "üêô Wait for deployment of ${{ github.event.inputs.release }} to ${{ matrix.value.tenantName }} to complete"
        with:
          server_task_id: ${{ matrix.value.serverTaskId }}
