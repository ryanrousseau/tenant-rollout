# This is a basic workflow to help you get started with Actions
name: Phased rollout to stores

# Controls when the workflow will run
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      release:
        description: "Octopus Release Number"
        required: true

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  deploy-to-alpha:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    name: "üêô Deploy release ${{ github.event.inputs.release }} to Alpha stores"
    outputs:
      server_tasks: ${{ steps.deploy-release-to-alpha.outputs.server_tasks }}

    env:
      OCTOPUS_URL: ${{ vars.OCTOPUS_SERVER_URL }}
      OCTOPUS_API_KEY: ${{ secrets.OCTOPUS_API_KEY }}
      OCTOPUS_SPACE: ${{ vars.OCTOPUS_SPACE_NAME }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: OctopusDeploy/deploy-release-tenanted-action@v3
        id: "deploy-release-to-alpha"
        name: "üêô Deploy release ${{ github.event.inputs.release }} to Alpha stores"
        with:
          project: "Point of Sale Server"
          release_number: ${{ github.event.inputs.release }}
          environment: "Production"
          tenant_tags: "Release Ring/Alpha"
      - id: "print-tasks"
        run: echo "${{ steps.deploy-release-to-alpha.outputs.server_tasks }}"

  wait-for-alpha:
    needs: [ deploy-to-alpha ]
    runs-on: ubuntu-latest
    name: "üêô Wait for deployment of ${{ github.event.inputs.release }} to Alpha Stores to complete"
    strategy:
      matrix:
        value: ${{ fromJson(needs.deploy-to-alpha.outputs.server_tasks) }}
  
    env:
      OCTOPUS_URL: ${{ vars.OCTOPUS_SERVER_URL }}
      OCTOPUS_API_KEY: ${{ secrets.OCTOPUS_API_KEY }}
      OCTOPUS_SPACE: ${{ vars.OCTOPUS_SPACE_NAME }}
  
    steps:
      - uses: OctopusDeploy/await-task-action@v3
        id: "wait-for-deploy-alpha"
        name: "üêô Wait for deployment of ${{ github.event.inputs.release }} to ${{ matrix.value.tenantName }} to complete"
        with:
          server_task_id: ${{ matrix.value.serverTaskId }}

  approve-alpha-deployment:
    name: ‚úÖ Approve Alpha deployment
    needs: [wait-for-alpha]
    runs-on: ubuntu-latest
    environment: 'alpha'
      
    steps:
      - name: Gather Alpha approval
        run: echo "‚úÖ Approval gathered"

  deploy-to-beta:
    # The type of runner that the job will run on
    needs: [approve-alpha-deployment]
    runs-on: ubuntu-latest
    name: "üêô Deploy release ${{ github.event.inputs.release }} to Beta stores"
    outputs:
      server_tasks: ${{ steps.deploy-release-to-beta.outputs.server_tasks }}

    env:
      OCTOPUS_URL: ${{ vars.OCTOPUS_SERVER_URL }}
      OCTOPUS_API_KEY: ${{ secrets.OCTOPUS_API_KEY }}
      OCTOPUS_SPACE: ${{ vars.OCTOPUS_SPACE_NAME }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: OctopusDeploy/deploy-release-tenanted-action@v3
        id: "deploy-release-to-beta"
        name: "üêô Deploy release ${{ github.event.inputs.release }} to Beta stores"
        with:
          project: "Point of Sale Server"
          release_number: ${{ github.event.inputs.release }}
          environment: "Production"
          tenant_tags: "Release Ring/Beta"
      - id: "print-tasks"
        run: echo "${{ steps.deploy-release-to-beta.outputs.server_tasks }}"

  wait-for-beta:
    needs: [ deploy-to-beta ]
    runs-on: ubuntu-latest
    name: "üêô Wait for deployment of ${{ github.event.inputs.release }} to Beta stores to complete"
    strategy:
      matrix:
        value: ${{ fromJson(needs.deploy-to-beta.outputs.server_tasks) }}
  
    env:
      OCTOPUS_URL: ${{ vars.OCTOPUS_SERVER_URL }}
      OCTOPUS_API_KEY: ${{ secrets.OCTOPUS_API_KEY }}
      OCTOPUS_SPACE: ${{ vars.OCTOPUS_SPACE_NAME }}
  
    steps:
      - uses: OctopusDeploy/await-task-action@v3
        id: "wait-for-deploy-beta"
        name: "üêô Wait for deployment of ${{ github.event.inputs.release }} to ${{ matrix.value.tenantName }} to complete"
        with:
          server_task_id: ${{ matrix.value.serverTaskId }}

  approve-beta-deployment:
    name: ‚úÖ Approve Beta deployment
    needs: [wait-for-beta]
    runs-on: ubuntu-latest
    environment: 'beta'
      
    steps:
      - name: Gather Beta approval
        run: echo "‚úÖ Approval gathered"

  deploy-to-stable:
    needs: [approve-beta-deployment]
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    name: "üêô Deploy release ${{ github.event.inputs.release }} to Stable stores"
    outputs:
      server_tasks: ${{ steps.deploy-release-to-stable.outputs.server_tasks }}

    env:
      OCTOPUS_URL: ${{ vars.OCTOPUS_SERVER_URL }}
      OCTOPUS_API_KEY: ${{ secrets.OCTOPUS_API_KEY }}
      OCTOPUS_SPACE: ${{ vars.OCTOPUS_SPACE_NAME }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: OctopusDeploy/deploy-release-tenanted-action@v3
        id: "deploy-release-to-stable"
        name: "üêô Deploy release ${{ github.event.inputs.release }} to Stable stores"
        with:
          project: "Point of Sale Server"
          release_number: ${{ github.event.inputs.release }}
          environment: "Production"
          tenant_tags: "Release Ring/Stable"
      - id: "print-tasks"
        run: echo "${{ steps.deploy-release-to-stable.outputs.server_tasks }}"

  wait-for-stable:
    needs: [ deploy-to-stable ]
    runs-on: ubuntu-latest
    name: "üêô Wait for deployment of ${{ github.event.inputs.release }} to Stable stores to complete"
    strategy:
      matrix:
        value: ${{ fromJson(needs.deploy-to-stable.outputs.server_tasks) }}
  
    env:
      OCTOPUS_URL: ${{ vars.OCTOPUS_SERVER_URL }}
      OCTOPUS_API_KEY: ${{ secrets.OCTOPUS_API_KEY }}
      OCTOPUS_SPACE: ${{ vars.OCTOPUS_SPACE_NAME }}
  
    steps:
      - uses: OctopusDeploy/await-task-action@v3
        id: "wait-for-deploy-stable"
        name: "üêô Wait for deployment of ${{ github.event.inputs.release }} to ${{ matrix.value.tenantName }} to complete"
        with:
          server_task_id: ${{ matrix.value.serverTaskId }}
